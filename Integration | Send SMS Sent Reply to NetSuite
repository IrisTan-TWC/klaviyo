import { Campaigns, Flows, Events } from 'klaviyo';
import axios from 'axios';

///// Update with your Received SMS Metric ID /////
const ReceivedSMSMetricId = "R8US2y";
const ENDPOINT_URL = "https://test.connect.boomi.com/ws/simple/upsertTestListener;boomi_auth=dGhld2luZXNvY2lldHktNzBEMjJLLkwzMkcwSjplN2E4NTAxMy1iYzUyLTQ1MGMtOWRhZi1hNzNiYjY0NjFiMTg=";

async function getLatestEventPropertiesByProfileAndMetric(profileId = null, metricId = null) {
  try {
    let filter = null;
    if (profileId && metricId) {
      filter = `and(equals(profile_id,\"${profileId}\"),equals(metric_id,\"${metricId}\"))`;
    }
    const response = await Events.getEvents({
      events_fields: ['timestamp', 'event_properties', 'datetime', 'uuid'],
      filter: filter,
      sort: '-datetime',
      page_size: 10 // Fetch 10 most recent events
    });
    const events = response?.body?.data || [];
    if (events.length > 0) {
      // Only log the latest event for debugging
      console.log('Latest event object:', events[0]);
      if (events[0] && events[0].attributes) {
        console.log('Latest eventProperties:', events[0].attributes.eventProperties);
      }
      // Return the eventProperties of the latest event
      return events[0].attributes?.eventProperties || null;
    } else {
      return null;
    }
  } catch (error) {
    console.error('Error getting latest event:', error);
    throw error;
  }
}

export default async (event, profile, context) => {
  // Get Profile Data
  const profileId = profile.data.id;
  const profileEmail = profile.data.attributes.email;
  const profilePhone = profile.data.attributes.phone_number;
  
  // Get Sent SMS Event Data
  const { event_properties } = event.data.attributes;
  const flowId = event_properties.$flow; // Flow ID
  const messageId = event_properties.$message; // Message ID
  const sentSMSMessageBody = event_properties["Message Body"]; // SMS Message Body
  const sentSMSMessageType = event_properties["Message Type"]; // SMS Message Body
  
  console.log(`Flow ID: ${flowId || 'not present'}`);
  console.log(`Message ID: ${messageId || 'not present'}`);
  
  // Initialize data object to collect all information
  let responseData = {
    email: profileEmail,
    mobile: profilePhone,
    last_sms_message_sent: null,
    message_type: sentSMSMessageType,
    message_source: null, // 'flow' or 'campaign'
    message_id: messageId,
    flow_id: flowId,
    flow_name: null,
    response: sentSMSMessageBody
  };
  
  // Check if variables are defined before using them
  const hasFlowId = flowId && flowId.trim() !== '';
  const hasMessageId = messageId && messageId.trim() !== '';
  
  // Check if both flowId and messageId exist
  if (hasFlowId && hasMessageId) {
    console.log("Both flowId and messageId detected - this is a flow message");
    responseData.message_source = 'flow';
    
    try {
      // Get flow name using flowId
      const flowResponse = await Flows.getFlow(flowId, {
        fields: ['name']
      });
      
      const flowName = flowResponse?.body?.data?.attributes?.name || "No name available";
      responseData.flow_name = flowName;
      console.log("Flow name:", flowName);
      
      // Get flow message using messageId
      const flowMessageResponse = await Flows.getFlowMessage(messageId, {
        fields: {
          'flow-message': ['name']
        }
      });
      
      const flowMessageName = flowMessageResponse?.body?.data?.attributes?.name || "No name available";
      responseData.last_sms_message_sent = flowMessageName;
      console.log("Flow message name:", flowMessageName);
      
    } catch (error) {
      console.log("Error:", error.message);
    }
    
  } else if (hasMessageId && !hasFlowId) {
    // Only messageId exists - get campaign message
    console.log("Only messageId detected - this is a campaign message");
    responseData.message_source = 'campaign';
    
    try {
      const campaignResponse = await Campaigns.getCampaignMessage(messageId, {
        fields: {
          campaign: ['name']
        },
        include: ['campaign']
      });
      
      let campaignName = "Campaign name not available";
      if (campaignResponse.body.included && Array.isArray(campaignResponse.body.included)) {
        const campaign = campaignResponse.body.included.find(item => item.type === 'campaign');
        if (campaign && campaign.attributes && campaign.attributes.name) {
          campaignName = campaign.attributes.name;
        }
      }
      
      responseData.last_sms_message_sent = campaignName;
      console.log("Campaign name:", campaignName);
      
    } catch (error) {
      console.log("Error:", error.message);
    }
    
  } else {
    // Neither flowId nor messageId exists - look up last event
    console.log("Neither flowId nor messageId detected - looking up last SMS event");
    responseData.message_source = 'last_sms_event';
    try {
      console.log(`Looking for last SMS event for profile ${profileId} with metric ID ${ReceivedSMSMetricId}`);
      // Use the helper function to get the latest eventProperties for this profile and metric
      const eventProperties = await getLatestEventPropertiesByProfileAndMetric(profileId, ReceivedSMSMetricId);
      if (eventProperties) {
        responseData.last_sms_message_sent = eventProperties['Message Name'] || eventProperties['Subject'] || 'Last Event';
        responseData.message_source = eventProperties['Message Type'] || 'last_sms_event';
        responseData.message_id = eventProperties['$message'] || null;
        responseData.flow_id = eventProperties['$flow'] || null;
        // If $flow exists, look up the flow name
        if (eventProperties['$flow']) {
          try {
            const flowResponse = await Flows.getFlow(eventProperties['$flow'], {
              fields: ['name']
            });
            responseData.flow_name = flowResponse?.body?.data?.attributes?.name || null;
          } catch (flowError) {
            console.log('Error looking up flow name:', flowError.message);
            responseData.flow_name = null;
          }
        }
      } else {
        console.log(`No events found for profile ID ${profileId}`);
        responseData.last_sms_message_sent = 'No events found for this profile';
      }
    } catch (error) {
      console.log("Error getting events:", error.message);
      console.log("Error details:", error);
      responseData.last_sms_message_sent = 'Error retrieving events';
    }
  }
  
  // Log the final data that will be sent to the endpoint
  console.log("Data to send to endpoint:", responseData);
  
  ///// UNCOMMENT THIS TO SEND DATA TO THE ENDPOINT /////

   try {
     console.log("Sending data to endpoint...");
     const response = await axios.post(ENDPOINT_URL, responseData, {
       headers: {
         'Content-Type': 'application/json'
       }
     });
     console.log("✓ Successfully sent data to endpoint. Response status:", response.status);
   } catch (error) {
     console.log("✗ Error sending data to endpoint:", error.message);
   }
  
  return responseData;
}
